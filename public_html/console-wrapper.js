$(function() {
  var binaries = [];
  var query = io('http://' + window.location.hostname + ':8081');
  query.on('connect', () => {
    query.emit('query', function(bins) {
      introduce();
      binaries = bins;
      term.resume();
      query.disconnect();
    });
  });
  
  var term = $('#terminal-panel').terminal((command, term) => {
    command = command.substr(0, command.length - 1);
    if (command == 'help') {
      term.echo('These are the binaries you can run: ');
      binaries.forEach((bin) => {
        term.echo('*\x1b[1;32m ' + bin + '\x1b[0m');
      });
      term.echo('You can also type `clear` to clear console.\n \n');
    } else if (command == 'clear') {
      term.clear();
    } else if (command.length != 0)
      initConnection(command);
  }, {
    clear: false,
    echoCommand: true,
    exit: false,
    greetings: '\x1b[1;36mBinary Wrapper\n\x1b[1;34mCopyright (c) 2017 theKidOfArcrania\x1b[0m\n',
    history: false,
    prompt: '> ',
    pauseEvents: false,
    onBlur: function() {
      return false;
    },
    onClear: introduce.bind(this, true),
    scrollOnEcho: true,
    
  });
  
  term.pause();
  
  function introduce(cleared)
  {
    if (cleared)
      term.echo('Enter binary to run\nOr type in `help` to get a list of valid binaries.');
    else
      term.echo('\n \nEnter binary to run\nOr type in `help` to get a list of valid binaries.');
  }
  
  function initConnection(program) {
    term.push(function(command) {
      socket.emit('stdin', command);
    }, {
      prompt: '',
      keymap: {
        'CTRL+D': function() {
          socket.emit("end");
        },
        'CTRL+C': function() {
          socket.emit("interrupt");
        }
      }
    });
      
    var socket = io('http://' + window.location.hostname + ':8081');
    socket.on('stdout', (msg) => {
      console.log(msg);
      term.echo(msg);
    });
    socket.on('stderr', (msg) => {
      term.error(msg);
    });
    socket.on('connect', () => {
      socket.emit('start', program);
    });
    socket.on('connect_error', (error) => {
      term.error("Failure to connect to server: " + error);
    });
    socket.on('disconnect', () => {
      term.echo("\x1b[1;34mConnection has been disconnected. Refresh or reconnect to continue.\x1b[0m");
      socket.disconnect();
      term.pop();
      introduce();
    });
  }
});